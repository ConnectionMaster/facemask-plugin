//
// Anti-aliasing effect for Face Mask Plugin
// Author: Kamyar Allahverdi
// Date: October 23, 2018
//
// This FXAA implementation is a modified version of FXAA 3.11
// The full license for NVIDIA FXAA 3.11 is provided here.
//
// Copyright (c) 2014-2015, NVIDIA CORPORATION. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//  * Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
//  * Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//  * Neither the name of NVIDIA CORPORATION nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
// OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//----------------------------------------------------------------------------------

uniform float4x4 ViewProj;
uniform float4x4 color_matrix;
uniform float3 color_range_min = {0.0, 0.0, 0.0};
uniform float3 color_range_max = {1.0, 1.0, 1.0};
uniform texture2d image;

uniform float inv_width;
uniform float inv_height;

uniform int antialiasing_method;

#define NO_ANTI_ALIASING 0
#define SSAA 1
#define FXAA 2

#define EDGE_THRESHOLD_MIN 0.0312
#define EDGE_THRESHOLD_MAX 0.063
#define SUBPIXEL_QUALITY 1

sampler_state def_sampler {
	Filter   = LINEAR;
	AddressU = Clamp;
	AddressV = Clamp;
};

struct VertInOut {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

VertInOut VSDefault(VertInOut vert_in)
{
	VertInOut vert_out;
	vert_out.pos = mul(float4(vert_in.pos.xyz, 1.0), ViewProj);
	vert_out.uv  = vert_in.uv;
	return vert_out;
}

// FXAA
float rgb2luma(float3 color){
	// to improve results, we can render luminance in a previous pass
	// here we use green as fast replacement for luminance
	// if we are not concerned about speed we can use the following formula:
    // return dot(color, float3(0.2126729,  0.7151522, 0.0721750));
    return color.g;
}

float QUALITY(int index) {
	if(index == 0)
		return 1.0;
	else if(index == 1)
		return 1.5;
	else if(index > 1 && index < 9)
		return 2;
	else
		return 4;
}

float4 fxaa(float2 uv) {
	float4 color_center = image.Sample(def_sampler, uv);

	// Luma at the current fragment
	float luma_center = rgb2luma(color_center.rgb);

	// Luma at the four direct neighbours of the current fragment.
	float luma_down = rgb2luma(image.Sample(def_sampler,uv,int2(0,-1)).rgb);
	float luma_up = rgb2luma(image.Sample(def_sampler,uv,int2(0,1)).rgb);
	float luma_left = rgb2luma(image.Sample(def_sampler,uv,int2(-1,0)).rgb);
	float luma_right = rgb2luma(image.Sample(def_sampler,uv,int2(1,0)).rgb);

	// Find the maximum and minimum luma around the current fragment.
	float luma_min = min(luma_center,min(min(luma_down,luma_up),min(luma_left,luma_right)));
	float luma_max = max(luma_center,max(max(luma_down,luma_up),max(luma_left,luma_right)));

	float luma_contrast = luma_max - luma_min;
	
	// ignore all the pixels that don't have a high contrast around them
	if(luma_contrast < max(EDGE_THRESHOLD_MIN,luma_max*EDGE_THRESHOLD_MAX)){
		return color_center;
	}
	
	float luma_down_left = rgb2luma(image.Sample(def_sampler,uv,int2(-1,-1)).rgb);
	float luma_up_left = rgb2luma(image.Sample(def_sampler,uv,int2(-1,1)).rgb);
	float luma_up_right = rgb2luma(image.Sample(def_sampler,uv,int2(1,1)).rgb);
	float luma_down_right = rgb2luma(image.Sample(def_sampler,uv,int2(1,-1)).rgb);

	// Combine the four edges lumas (using intermediary variables for future computations with the same values).
	float luma_down_up = luma_down + luma_up;
	float luma_left_right = luma_left + luma_right;

	// Same for corners
	float luma_left_corners = luma_down_left + luma_up_left;
	float luma_down_corners = luma_down_left + luma_down_right;
	float luma_right_corners = luma_down_right + luma_up_right;
	float luma_up_corners = luma_up_right + luma_up_left;

	// Compute an estimation of the gradient along the horizontal and vertical axis.
	float edge_horizontal =  abs(-2.0 * luma_left + luma_left_corners)  + abs(-2.0 * luma_center + luma_down_up ) * 2.0    + abs(-2.0 * luma_right + luma_right_corners);
	float edge_vertical =    abs(-2.0 * luma_up + luma_up_corners)      + abs(-2.0 * luma_center + luma_left_right) * 2.0  + abs(-2.0 * luma_down + luma_down_corners);

	// Is the local edge horizontal or vertical ?
	bool is_horizontal = (edge_horizontal >= edge_vertical);

	// Select the two neighboring texels lumas in the opposite direction to the local edge.
	float luma1 = is_horizontal ? luma_down : luma_left;
	float luma2 = is_horizontal ? luma_up : luma_right;
	// Compute gradients in this direction.
	float gradient1 = luma1 - luma_center;
	float gradient2 = luma2 - luma_center;

	// Which direction is the steepest ?
	bool is_1_steepest = abs(gradient1) >= abs(gradient2);

	// Gradient in the corresponding direction, normalized.
	float gradient_scaled = 0.25*max(abs(gradient1),abs(gradient2));

	// Choose the step size (one pixel) according to the edge direction.
	float step_length = is_horizontal ? inv_height : inv_width;

	// Average luma in the correct direction.
	float luma_local_average = 0.0;

	if(is_1_steepest){
		// Switch the direction
		step_length = - step_length;
		luma_local_average = 0.5*(luma1 + luma_center);
	} else {
		luma_local_average = 0.5*(luma2 + luma_center);
	}

	// Shift UV in the correct direction by half a pixel.
	float2 current_uv = uv;
	if(is_horizontal){
		current_uv.y += step_length * 0.5;

	} else {
		current_uv.x += step_length * 0.5;
	}

	// Compute offset (for each iteration step) in the right direction.
	float2 offset = is_horizontal ? float2(inv_width,0.0) : float2(0.0,inv_height);
	// Compute UVs to explore on each side of the edge, orthogonally. The QUALITY allows us to step faster.
	float2 uv1 = current_uv - offset;
	float2 uv2 = current_uv + offset;


	float luma_end1,luma_end2;
	bool reached1 = false;
	bool reached2 = false;
	bool reached_both = false;

	// Keep searching
	if(!reached_both){

		for(int i = 0; i < 20; i++){
			// If needed, read luma in 1st direction, compute delta.
			if(!reached1){
				luma_end1 = rgb2luma(image.Sample(def_sampler, uv1).rgb);
				luma_end1 = luma_end1 - luma_local_average;
			}
			// If needed, read luma in opposite direction, compute delta.
			if(!reached2){
				luma_end2 = rgb2luma(image.Sample(def_sampler, uv2).rgb);
				luma_end2 = luma_end2 - luma_local_average;
			}
			// If the luma deltas at the current extremities is larger than the local gradient, we have reached the side of the edge.
			reached1 = abs(luma_end1) >= gradient_scaled;
			reached2 = abs(luma_end2) >= gradient_scaled;
			reached_both = reached1 && reached2;

			// If the side is not reached, we continue to explore in this direction, with a variable quality.
			if(!reached1){
				uv1 -= offset * QUALITY(i);
			}
			if(!reached2){
				uv2 += offset * QUALITY(i);
			}

			// If both sides have been reached, stop the exploration.
			if(reached_both){ break;}
		}

	}

	// Compute the distances to each extremity of the edge.
	float distance1 = is_horizontal ? (uv.x - uv1.x) : (uv.y - uv1.y);
	float distance2 = is_horizontal ? (uv2.x - uv.x) : (uv2.y - uv.y);

	// In which direction is the extremity of the edge closer ?
	bool is_direction1 = distance1 < distance2;

	float distance_final = min(distance1, distance2);

	// Length of the edge.
	float edge_thickness = (distance1 + distance2);

	// UV offset: read in the direction of the closest side of the edge.
	float edge_blend = - distance_final / edge_thickness + 0.5;

	// Is the luma at center smaller than the local average ?
	bool is_luma_center_smaller = luma_center < luma_local_average;

	// If the luma at center is smaller than at its neighbour, the delta luma at each end should be positive (same variation).
	// (in the direction of the closer side of the edge.)
	bool correct_variation = ((is_direction1 ? luma_end1 : luma_end2) < 0.0) != is_luma_center_smaller;

	// If the luma variation is incorrect, do not offset.
	float final_offset = correct_variation ? edge_blend : 0.0;

	// Sub-pixel shifting
	// Full weighted average of the luma over the 3x3 neighborhood.
	float luma_average = (1.0/12.0) * (2.0 * (luma_down_up + luma_left_right) + luma_left_corners + luma_right_corners);
	// Ratio of the delta between the global average and the center luma, over the luma range in the 3x3 neighborhood.
	float sub_pixel_offset1 = clamp(abs(luma_average - luma_center)/luma_contrast,0.0,1.0);
	float sub_pixel_offset2 = (-2.0 * sub_pixel_offset1 + 3.0) * sub_pixel_offset1 * sub_pixel_offset1;
	// Compute a sub-pixel offset based on this delta.
	float sub_pixel_offset_final = sub_pixel_offset2 * sub_pixel_offset2 * SUBPIXEL_QUALITY;
	sub_pixel_offset_final=sub_pixel_offset1;

	// Pick the biggest of the two offsets.
	final_offset = max(final_offset,sub_pixel_offset_final);

	// return float4(final_offset,0,0,1);
		// Compute the final UV coordinates.
	float2 final_uv = uv;
	if(is_horizontal){
		final_uv.y += final_offset * step_length;
	} else {
		final_uv.x += final_offset * step_length;
	}

	// Read the color at the new UV coordinates, and use it.
	return image.SampleLevel(def_sampler,final_uv,0);
	// return average(final_uv);

}


float4 average(float2 uv) {
	float4 samp1 = image.Sample(def_sampler, uv);
	float4 samp2 = image.Sample(def_sampler, uv, int2(0,-1));
	float4 samp3 = image.Sample(def_sampler, uv, int2(0,+1));
	float4 samp4 = image.Sample(def_sampler, uv, int2(+1,0));
	float4 samp5 = image.Sample(def_sampler, uv, int2(+1,+1));
	float4 samp6 = image.Sample(def_sampler, uv, int2(+1,-1));
	float4 samp7 = image.Sample(def_sampler, uv, int2(-1,0));
	float4 samp8 = image.Sample(def_sampler, uv, int2(-1,+1));
	float4 samp9 = image.Sample(def_sampler, uv, int2(-1,-1));
	return (samp1 + samp2 + samp3 + samp4 + samp5 + samp6 + samp7 + samp8 + samp9) / 9.0;
	// return (samp7+samp4+samp3+samp2) / 4.0;
}

float4 PSDrawBare(VertInOut vert_in) : TARGET
{
	float4 orig = image.SampleLevel(def_sampler, vert_in.uv, 0);
	if(antialiasing_method == NO_ANTI_ALIASING)
		return image.SampleLevel(def_sampler, vert_in.uv, 0);
	else if(antialiasing_method == SSAA)
		// return float4(average(vert_in.uv).rgb-orig.rgb,orig.a);
		return average(vert_in.uv);
	else if(antialiasing_method == FXAA)
	{
		return fxaa(vert_in.uv);
	}
	else
		return image.Sample(def_sampler, vert_in.uv);
	// return average(fxaa(vert_in.uv));
}

float4 PSDrawMatrix(VertInOut vert_in) : TARGET
{
	float4 yuv = image.Sample(def_sampler, vert_in.uv);
	yuv.xyz = clamp(yuv.xyz, color_range_min, color_range_max);
	return saturate(mul(float4(yuv.xyz, 1.0), color_matrix));
}

technique Draw
{
	pass
	{
		vertex_shader = VSDefault(vert_in);
		pixel_shader  = PSDrawBare(vert_in);
	}
}

technique DrawMatrix
{
	pass
	{
		vertex_shader = VSDefault(vert_in);
		pixel_shader  = PSDrawMatrix(vert_in);
	}
}
